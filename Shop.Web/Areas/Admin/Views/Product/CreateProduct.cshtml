@model Shop.Domain.ViewModels.Admin.Product.CreateProductViewModel
@{
    ViewData["Title"] = "افزودن محصول جدید";
}
<meta name=robots content=noindex,nofollow>

<div class="row">
    <form method="post" enctype="multipart/form-data">
        <div class="col-md-8">
            <h2> @ViewData["Title"] </h2>
            <hr />
            <div class="form-group">
                <label>نام محصول</label>
                <input type="text" asp-for="Name" class="form-control">
                <span asp-validation-for="Name"></span>
            </div>
            <div class="form-group">
                <label>عنوان در مرورگر</label>
                <input type="text" asp-for="TitleInBrowser" class="form-control">
                <span asp-validation-for="TitleInBrowser"></span>
            </div>
            <div class="form-group">
                <label>گروه اصلی</label>
                <select class="form-control" asp-for="GroupId" asp-items="@(ViewData["Groups"] as SelectList)"></select>
                <span asp-validation-for="GroupId"></span>
            </div>
            <div class="form-group">
                <label>گروه فرعی</label>
                <select class="form-control" asp-for="SubGroupId" asp-items="@(ViewData["SubGroup"] as SelectList)"></select>

            </div>
            <div class="form-group">
                <label>توضیحات کوتاه</label>
                <input type="text" asp-for="ShortDescription" class="form-control">
                <span asp-validation-for="ShortDescription"></span>
            </div>
            <div class="form-group">
                <label>توضیحات</label>
                <textarea id="body" class="form-control" asp-for="Description" rows="10"></textarea>
                <span asp-validation-for="Description"></span>
            </div>
            <div class="form-group">
                <label>قیمت </label>
                <input type="number" asp-for="Price" value="0" class="form-control" />
                <span asp-validation-for="Price"></span>
            </div>
            <div class="form-group">
                <label>تعداد </label>
                <input type="number" asp-for="Count" value="0" class="form-control" />
                <span asp-validation-for="Count"></span>
            </div>
            <div class="form-group">
                <label>درصد تخفیف </label>
                <input type="number" asp-for="DicPercent" class="form-control" placeholder="اگر محصول تخفیف دارد وارد شود در غیر این صورت خالی بگذارید" />

            </div>
            <div class="form-group">
                <label>وضعیت محصول</label>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" asp-for="IsActive">
                        فعال
                    </label>
                </div>
            </div>

            <input type="submit" value="ذخیره اطلاعات" class="btn btn-success" />
        </div>
        <div class="col-md-4">
            <p></p>
            <img id="imGroup" class="thumbnail" src="/images/shopping-cart.png" />
            <div class="form-group">

                <label>انتخاب تصویر</label>
                <input type="file" name="imgProduct" id="imgProductGroup">
            </div>
        </div>
    </form>
</div>


@section Scripts
{
    <partial name="_Custom" />
    <partial name="_ValidationScriptsPartial" />
    <script src="~/Ckeditor/ckeditor.js"></script>
    <script>

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            // More methods.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '@Url.Action("UploadImage", "Home")', true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        ClassicEditor
            .create(document.querySelector('#body'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],

                // More configuration options.
                // ...

            })
            .catch(error => {
                console.log(error);
            });
    </script>


}